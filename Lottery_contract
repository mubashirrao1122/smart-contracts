// SPDX-License-Identifier: GPL-3.0

pragma solidity >=0.7.0 <0.9.0;

contract lottery {
    address public manager;
    address payable[] public players;
    address payable public winner;

    constructor() {
        manager = msg.sender;
    }

    function participate() public payable {
        require(msg.value == 1 ether, "you have to send 1 eth");
        players.push(payable(msg.sender));
    }

    function getBalance() public view returns(uint) {
        require(msg.sender == manager, "you are not the manager");
        return address(this).balance;
    }

    function random() private view returns (uint) {
        // Use block.prevrandao in 0.8.20+, otherwise block.difficulty
        return uint(keccak256(abi.encodePacked(block.prevrandao, block.timestamp, players.length)));
    }

    function pickWinner() public {
        require(manager == msg.sender, "you are not the manager");
        require(players.length >= 3, "Players length is less than 3");
        uint r = random();
        uint index = r % players.length;
        winner = players[index];
        winner.transfer(address(this).balance);
        players = new address payable[](0); // Reset players array
    }
}
